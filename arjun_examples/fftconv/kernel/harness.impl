#include <iostream>
#include <string>
#include <stdlib.h>

#include <fstream>

#define LEN 4096
// For seq len of 4096 we have log2(4096) = 12 twiddle factors
#define TW 12
#define BATCH 1
#define BLOCKS 16

#define CudaCheckError()    __cudaCheckError( __FILE__, __LINE__ )
inline void __cudaCheckError( const char *file, const int line ) {
    cudaError err = cudaGetLastError();
    if ( cudaSuccess != err )
    {
        fprintf( stderr, "cudaCheckError() failed at %s:%i : %s\n",
                 file, line, cudaGetErrorString( err ) );
        exit( -1 );
    }
    // More careful checking. However, this will affect performance.
    // Comment away if needed.
    err = cudaDeviceSynchronize();
    if( cudaSuccess != err )
    {
        fprintf( stderr, "cudaCheckError() with sync failed at %s:%i : %s\n",
                 file, line, cudaGetErrorString( err ) );
        exit( -1 );
    }
}

// Function to calculate the number of floating-point operations
long long flops(int batch, int seqlen, int k, int channels) {
    long long f = batch * static_cast<long long>(seqlen) * k * channels;

    return f;
}

// Function to calculate the efficiency in teraflops
double efficiency(long long flop, double time) {
    // Convert flop to teraflops and time to milliseconds
    double tflops = flop / 1e12;
    double time_ms = time / 1e6;
    return tflops / time_ms;
}

bool check_value(float abs_tol, float rel_tol, float *o, float *o_ref, int num_elements) {
    int diff_counter = 0;
    std::ofstream o_ref_file("printouts/o_ref.txt");
    std::ofstream o_file("printouts/o.txt");
    std::ofstream diff_file("printouts/diff.txt");
    bool good = true;
    for (size_t i = 0; i < num_elements; i++) {
        float pred = o[i];
        float actual = o_ref[i];
        float diff = abs(pred - actual);
        o_ref_file << o_ref[i] << ' ';
        o_file << o[i] << ' ';
        diff_file << diff << ' ';
        if (diff > max(abs_tol, actual * rel_tol)) {
            /*std::cout << "Pred[" << i << "] = " << pred
            << "Actual[" << i << "] = " << actual
            << " Abs Diff: " << diff << std::endl;*/
            diff_counter += 1;
            good = false;
        }
    }
    std::cout << diff_counter << " elements out of " << num_elements << " violate threshold" << std::endl;
    return good;
}

void load() {
    // Create FFT matrix in global (using Monarch decomposition)
    // IFFT matrix is just transpose and factor of FFT
}

int main(int argc, char **argv) {
    float *x = new float[INPUT_LEN];
    float *tw = new float[TW];
    float *o_ref = new float[INPUT_LEN];
    
    bf16 *x_bf = new bf16[INPUT_LEN];
    bf16 *tw_bf = new bf16[TW];
    // Holds output from kernel
    bf16 *o_bf = new bf16[INPUT_LEN];

    // On host after kernel
    float *o = new float[INPUT_LEN];

    bf16 *d_x, *d_tw, *d_o;
    bf16 *d_tw_imag, *d_x_ident_real, *d_x_tw_real;

    cudaMalloc(&d_x, INPUT_LEN * sizeof(bf16));
    cudaMalloc(&d_tw, TOTAL_ELEMENTS_X * sizeof(bf16));
    cudaMalloc(&d_o, TOTAL_OUTPUT_ELEMENTS * sizeof(bf16));

    if(argc > 1) {
        std::ifstream infile(argv[1]);
        std::cout << "Starting to enter!" << std::endl;

        for(int i = 0; i < INPUT_LEN; i++) infile >> x[i];
        std::cout << "Finished loading X" << std::endl;
        for(int i = 0; i < TW; i++) infile >> tw[i];
        std::cout << "Finished loading X" << std::endl;
        for(int i = 0; i < INPUT_LEN; i++) infile >> o_ref[i];
        std::cout << "Finished loading O_REF" << std::endl;
    }

    // Convert to bf16
    for(int i = 0; i < INPUT_LEN; i++) {
        x_bf[i] = __float2bfloat16(x[i]);
    }
    for(int i = 0; i < TW; i++) {
        tw_bf[i] = __float2bfloat16(tw[i]);
    }

    //cudaMemcpy(d_x, x_bf, INPUT_LEN * sizeof(bf16), cudaMemcpyHostToDevice);
    //cudaMemcpy(d_tw, tw_bf, TW * sizeof(bf16), cudaMemcpyHostToDevice);
    loads(d_tw_imag, d_x_ident_real, d_x_tw_real);

    unsigned long mem_size = 108000;
    cudaStream_t stream;
    cudaStreamCreate(&stream);
    std::cout << "Starting kernel\n";
    cudaDeviceSynchronize();
    const auto start = std::chrono::high_resolution_clock::now();
    launch_fftconv_tk(
        d_x, d_tw, d_o,
        INPUT_LEN,
        mem_size
    );
    cudaDeviceSynchronize();
    const auto finish = std::chrono::high_resolution_clock::now();
    CudaCheckError();
    std::cout << "Finished kernel\n\n";
    std::cout << "Execution time: " << std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count() << " us\n" << std::endl;
    
    cudaMemcpy(o_bf, d_o, INPUT_LEN * sizeof(bf16), cudaMemcpyDeviceToHost);

    for(int i = 0; i < INPUT_LEN; i++) {  o[i] = __bfloat162float(o_bf[i]);  }

    // Reduce criteria for diff to e-1, b/c of bf16<->float32 conversion
    constexpr float abs_tol = 5.0e-1f;
    constexpr float rel_tol = 1.0e-1f;

    std::cout << "Total output elements: " << TOTAL_OUTPUT_ELEMENTS << std::endl;
    if (check_value(abs_tol, rel_tol, o, o_ref, TOTAL_OUTPUT_ELEMENTS)) {
        std::cout << "Correctness Test PASSED" << std::endl;
    } else {
        std::cout << "Correctness Test FAILED" << std::endl;
    }

    // calculate efficiency
    //long long f = flops(BATCH, INPUT, K, CHANNELS);
    //double e = efficiency(f, std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count());
    //std::cout << "Efficiency: " << e << " TFLOPS" << std::endl;

    delete[] x, tw, o_ref, o;
    delete[] x_bf, tw_bf, o_bf;
    cudaFree(d_x);
    cudaFree(d_tw);
    cudaFree(d_o);
    cudaFree(d_tw_imag);
    cudaFree(d_x_ident_real);
    cudaFree(d_x_tw_real);
    cudaStreamDestroy(stream);

    return 0;
}